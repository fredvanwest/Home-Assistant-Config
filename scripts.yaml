activate_alexa_actionable_notification:
  description: Activates an actionable notification on a specific echo device
  fields:
    text:
      description: The text you would like alexa to speak.
      example: What would you like the thermostat set to?
    event_id:
      description: Correlation ID for event responses
      example: ask_for_temperature
    alexa_device:
      description: Alexa device you want to trigger
      example: media_player.bedroom_echo
  sequence:
  - service: input_text.set_value
    data:
      entity_id: input_text.alexa_actionable_notification
      value: '{"text": "{{ text }}", "event": "{{ event_id }}"}'
  - service: media_player.play_media
    data:
      entity_id: '{{ alexa_device }}'
      media_content_type: skill
      media_content_id: amzn1.ask.skill.ee40abd9-1e42-4824-8745-6f4951023294
script_bathroom_minimum:
  alias: Script Bathroom Minimum
  sequence:
  - service: scene.turn_on
    data: {}
    target:
      entity_id: scene.bathroom_minimum
  - service: timer.cancel
    data: {}
    target:
      entity_id: timer.bathroom_timer
  mode: single
report_fred_work_status:
  alias: Script Fred Work Status
  sequence:
  - choose:
    - conditions:
      - condition: state
        entity_id: calendar.fred_demo
        state: 'on'
      sequence:
      - service: notify.alexa_media
        data:
          message: Fred is in a demo.
          target: '{{ states(''sensor.last_alexa'') }}'
          data:
            type: tts
    - conditions:
      - condition: state
        entity_id: calendar.fred_office
        state: 'on'
      sequence:
      - service: notify.alexa_media
        data:
          message: Fred is at JPMC.
          target: '{{ states(''sensor.last_alexa'') }}'
          data:
            type: tts
    - conditions:
      - condition: state
        entity_id: calendar.fred_rota
        state: 'on'
      sequence:
      - service: notify.alexa_media
        data:
          message: Fred is on ROTA.
          target: '{{ states(''sensor.last_alexa'') }}'
          data:
            type: tts
    - conditions:
      - condition: state
        entity_id: calendar.fred_vacation
        state: 'on'
      sequence:
      - service: notify.alexa_media
        data:
          message: Fred is on vacation today.
          target: '{{ states(''sensor.last_alexa'') }}'
          data:
            type: tts
    - conditions:
      - condition: state
        entity_id: calendar.jpmc_holiday
        state: 'on'
      sequence:
      - service: notify.alexa_media
        data:
          data:
            type: tts
          message: Today is a JPMC Holiday.
          target: '{{ states(''sensor.last_alexa'') }}'
    - conditions:
      - condition: time
        before: '11:00:00'
        after: '10:30:00'
        weekday:
        - mon
        - tue
        - wed
        - thu
        - fri
      sequence:
      - service: notify.alexa_media
        data:
          message: Fred may be in his daily standup.
          target: '{{ states(''sensor.last_alexa'') }}'
          data:
            type: tts
    default:
    - choose:
      - conditions:
        - condition: state
          entity_id: binary_sensor.vw_luxo_audio_input_in_use
          state: 'on'
        sequence:
        - service: notify.alexa_media
          data:
            message: Fred is on a zoom call.
            target: '{{ states(''sensor.last_alexa'') }}'
            data:
              type: tts
      default:
      - service: notify.alexa_media
        data:
          message: Fred is available.
          target: '{{ states(''sensor.last_alexa'') }}'
          data:
            type: tts
  mode: single
script_fred_work_status_backup:
  alias: Script Fred Work Status Backup
  sequence:
  - choose:
    - conditions:
      - condition: state
        entity_id: calendar.fred_demo
        state: 'on'
      sequence:
      - service: notify.alexa_media_vw_familyroom
        data:
          message: Fred is in a demo
          data:
            type: tts
    - conditions:
      - condition: state
        entity_id: calendar.fred_office
        state: 'on'
      sequence:
      - service: notify.alexa_media_vw_familyroom
        data:
          message: Fred is in office.
          data:
            type: tts
    - conditions:
      - condition: state
        entity_id: calendar.fred_rota
        state: 'off'
      sequence:
      - service: notify.alexa_media_vw_familyroom
        data:
          message: Fred is on ROTA.
          data:
            type: tts
    - conditions:
      - condition: state
        entity_id: calendar.fred_vacation
        state: 'on'
      sequence:
      - service: notify.alexa_media_vw_familyroom
        data:
          message: Fred is on vacation today.
          data:
            type: tts
    - conditions:
      - condition: state
        entity_id: calendar.jpmc_holiday
        state: 'on'
      sequence:
      - service: notify.alexa_media_vw_familyroom
        data:
          data:
            type: tts
          message: Fred is on holiday today.
    - conditions:
      - condition: time
        before: '11:00:00'
        after: '10:30:00'
        weekday:
        - mon
        - tue
        - wed
        - thu
        - fri
      sequence:
      - service: notify.alexa_media_vw_familyroom
        data:
          message: Fred may be in his daily standup
          data:
            type: tts
    default:
    - choose:
      - conditions:
        - condition: state
          entity_id: binary_sensor.vw_luxo_audio_input_in_use
          state: 'on'
        sequence:
        - service: notify.alexa_media_vw_familyroom
          data:
            message: Fred's Zoom is in use.
            data:
              type: tts
      default:
      - service: notify.alexa_media_vw_familyroom
        data:
          message: Fred is available.
          data:
            type: tts
  mode: single
script_suspend_door_alert:
  alias: script_suspend_door_alert
  sequence:
  - service: automation.turn_off
    data: {}
    target:
      entity_id: automation.smart_door
  - service: notify.alexa_media
    data:
      message: Turning off door alerts.
      target: '{{ states(''sensor.last_alexa'') }}'
      data:
        type: tts
  mode: single
script_resume_door_alert:
  alias: script_resume_door_alert
  sequence:
  - service: automation.turn_on
    data: {}
    target:
      entity_id: automation.smart_door
  - service: notify.alexa_media
    data:
      message: Turning on door alerts.
      target: '{{ states(''sensor.last_alexa'') }}'
      data:
        type: tts
  mode: single
script_heating_pad_on:
  alias: Script Turn On Heating Pad
  sequence:
  - service: automation.trigger
    data: {}
    target:
      entity_id: automation.turn_on_heating_pad
  mode: single
pop_image:
  alias: Notification Test
  variables:
    image: "{%- set image =\n  \"https://192.168.1.45:8123\" + state_attr(\"camera.mail_usps_camera\",\"entity_picture\")\n%}
      {{ image }}\n"
  sequence:
  - service: notify.hass_agent_l_pf2k9yz5
    data:
      title: Another Laptop Camera Test
      message: Test message
      data:
        duration: 10
        image: '{{ image }}'
  mode: single
  icon: mdi:bell
notification_sound:
  alias: Notification Sound
  sequence:
  - service: media_player.play_media
    data:
      media_content_type: music
      media_content_id: https://192.168.1.45:8123/local/alexa/TTS-want-you-to-want-me.mp3
    target:
      entity_id:
      - media_player.hass_agent_l_pf2k9yz5_mediaplayer
  variables:
    image: "{%- set image =\n  \"https://192.168.1.45:8123\" + state_attr(\"camera.mail_usps_camera\",\"entity_picture\")\n%}
      {{ image }}\n"
  mode: single
  icon: mdi:speaker
say_house_cup:
  alias: Say House Cup
  fields:
    device:
      description: Alexa Target
      example: media_player.vw_guestroom
  sequence:
  - choose:
    - conditions:
      - condition: state
        entity_id: input_select.hogwarts_house
        state: slytherin
      sequence:
      - service: notify.alexa_media
        data:
          message: <audio src="https://mc-usa.duckdns.org/local/alexa/slytherin.mp3"/>
          target: '{{ device }}'
          data:
            type: tts
      - service: notify.alexa_media
        data:
          message: Great news Fred!
          target: '{{ device }}'
          data:
            type: tts
    - conditions:
      - condition: state
        entity_id: input_select.hogwarts_house
        state: hufflepuff
      sequence:
      - service: notify.alexa_media
        data:
          message: <audio src="https://mc-usa.duckdns.org/local/alexa/hufflepuff.mp3"/>
          target: '{{ device }}'
          data:
            type: tts
      - service: notify.alexa_media
        data:
          message: Great news Laura!
          target: '{{ device }}'
          data:
            type: tts
    - conditions:
      - condition: state
        entity_id: input_select.hogwarts_house
        state: gryffindor
      sequence:
      - service: notify.alexa_media
        data:
          message: <audio src="https://mc-usa.duckdns.org/local/alexa/gryffindor.mp3"/>
          target: '{{ device }}'
          data:
            type: tts
      - service: notify.alexa_media
        data:
          message: Great news Nico!
          target: '{{ device }}'
          data:
            type: tts
    - conditions:
      - condition: state
        entity_id: input_select.hogwarts_house
        state: ravenclaw
      sequence:
      - service: notify.alexa_media
        data:
          message: <audio src="https://mc-usa.duckdns.org/local/alexa/ravenclaw.mp3"/>
          target: '{{ device }}'
          data:
            type: tts
      - service: notify.alexa_media
        data:
          message: Great news Duchess!
          target: '{{ device }}'
          data:
            type: tts
  - service: notify.alexa_media
    data:
      message: Todays house cup was won by {{ states("input_select.hogwarts_house")
        }}. I believe congratulations are in order.
      target: '{{ device }}'
      data:
        type: tts
  mode: single
script_house_cup:
  alias: Script House Cup
  fields:
    device:
      description: Device to play results
      example: media_player.vw_familyroom
  sequence:
  - service: script.say_house_cup
    data:
      device: '{{ states("sensor.last_alexa") }}'
  mode: single
say_house_points_standings:
  alias: Say House Points Standings
  fields:
    device:
      description: Alexa Target
      example: media_player.vw_guestroom
  sequence:
  - service: notify.alexa_media
    data:
      message: "\"As of this moment,\" {% set house_standings = [{\"name\":\"slytherin\",
        \"pts\": states(\"counter.slytherin_points\") | int},{\"name\":\"gryffindor\",
        \"pts\":states(\"counter.gryffindor_points\")|int},{\"name\":\"hufflepuff\",\"pts\":states(\"counter.hufflepuff_points\")|int},{\"name\":\"ravenclaw\",
        \"pts\":states(\"counter.ravenclaw_points\")|int}] %} {% for house in house_standings|sort(attribute='pts',
        reverse=true) %} \n  {% if loop.index == 4 %} and {% endif %}\n  {% if house.pts
        == 1 %} 1 point has{% else %} {{house.pts}} points have{% endif %} been awarded
        to {{ house.name }}.\n{% endfor %}\n"
      target: '{{ device }}'
      data:
        type: tts
  mode: single
script_say_house_points_standing:
  alias: Script Say House Points Standing
  sequence:
  - service: script.say_house_points_standings
    data:
      device: '{{ states("sensor.last_alexa") }}'
  mode: single
show_house_points:
  alias: show house points
  sequence:
  - service: browser_mod.sequence
    data:
      sequence:
      - service: browser_mod.navigate
        data:
          path: /lovelace/house-cup-standings
      - service: browser_mod.delay
        data:
          time: 5000
      - service: browser_mod.navigate
        data:
          path: /lovelace/dashboard
  mode: single
